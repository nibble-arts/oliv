															Initialize OLIV
															---------------

index.php
---------

The initialization of the OLIV system is done by some steps.


Step 1: session/index.php
-------------------------

First the index.php in the session directory is called. The first action is to
include the init.php file, which must be present in the same session directory.


Step 2: session/init.php
------------------------

The init.php script loades the configuration file for the session (session.xml)
and defines all constants for the called session. In the session config file the
following parameters must be defined:

OLIV_CORE_PATH			a relative path from the session directory to the root path
										of the core system
OLIV_SITE_NAME			the name of the site session
OLIV_ICON						the name of the browser icon (the path doesn't matter,
										because for display the oliv image class is used
OLIV_DEFAULT_LANG		the default language of the site
OLIV_TEMPLATE				the used template
OLIV_INDEX_PAGE			the name of the page to start
OLIV_TEMPLATE_MARK	show/hide the template edit marking
OLIV_TEMPLATE_EDIT	show/hide the template edit areas

The xml file has to have the format:

<core>
	<system>
		<OLIV_...>parameter</OLIV_...>
			...
	</system>
</core>

The last action of the script is to include the core script core.php, which must
be in the library/ subdirectory from the OLIV_CORE_PATH.


Step 3: library/core.php
------------------------

If the parameters are set correctly, the core init.php script is called where
the system parameters are set.


Step 4: library/init.php
------------------------

The system init makes the following settings:

OLIV_SCRIPT_NAME			the name of the called script
OLIV_DOCUMENT_ROOT		the absolute path to the session root directory
OLIV_BASE							the relative path to the document root
OLIV_HOST							the name of the host
OLIV_PROTOCOL					the used protocol (http or https)

After this basic definitions the system.xml file is loaded, which must be in the
OLIV_CORE_PATH directory. In the system config file the following parameters
must be defined:

OLIV_SSH_HOST					the name of the ssh host. If it is the same as the http
											host, this parameter must be left empty.
											//TODO not implemented yet
OLIV_INCLUDE_PATH			relative path to the system scripts (default = library/)
OLIV_JAVASCRIPT_PATH	relative path to the javascript directory
OLIV_MODULE_PATH			relative path to the module directory
OLIV_PAGE_PATH				relative path to the page definition directory
OLIV_PLUGIN_PATH			relative path to the plugin directory
OLIV_TEMPLATE_PATH		relative path to the template directory
OLIV_IMAGES_PATH			relative path to the system image directory
OLIV_LANGUAGE_PATH		relative path to the system language directory
OLIV_CORE_TEXT				namespace of the system text
OLIV_ACCESS_FILE			= global: use the global access file in the OLIV_CORE_PATH
											= local: use the local file in the session directory

script includes
---------------

Next the scripts defined in the include part of the system definition are 
included from the OLIV_INCLUDE_PATH. The valid image types are loaded from the
system configuration.

The user access data is loaded from the access.xml, depending on the
OLIV_ACCESS_FILE definition loaded previously.

_argv
-----

Now the parameters from the page call are analyzed and stored in the
variable:

global array _argv

The array contains the fields:

	"lang"			language of the page call
	"url"				friendly url to the page
	"val"				values behind url in the friendly url format

All parameters added after a ? are also stored as key/value paires in the array.

The lang parameter is used, so set the OLIV_LANG constant to the used language.

//TODO If no lang is found, try to find out the language
from the HTTP_USER_AGENT


Environment completed
---------------------

With this last definitions, the environment is completely established, all
classes are loaded and the OLIVENV constant is set to alive.

The last part of the system init process is to set or change the user login
state.


Step 5: core.php
----------------

The last step in the initialization process is to create instances of all needed
classes:

	OLIVRoute						router for link translation
	OLIVHtml						html header class
	OLIVModule					module call and support
	OLIVPlugin					render plugin interface
	OLIVTemplate				site template class
	OLIVPage						page class
	OLIVProcessor				template/page render preprocessor
	OLIVRender					the html rendering engine

