//TODO
Optimize the rendering engine, to render the content to the corresponding template
field also recursive the substructure of the content:

Example:

<template_area>				-> inserted in the template
	<div>								-> render directly using the plugin system
		<img .... />
		<h2>text</h2>
	</div>
</template_area>


//TODO
Set status of the template tags, if rendered when no content is defined, or rendered
any way.

																Class OLIVRender
																----------------


The render engine is the central part of OLIV. It can convert a template xml and
a content xml into valid html code. The renderer is working recursive and can
handle cascaded templates with any depth.


path: library/


class attributes
----------------

	$o									output variable for the html code


class methods
-------------


void __construct(void)
----------------------
The constructor initializes the output variable $o.


string public display(void)
---------------------------
The display method returns the rendered html code string.


void public page(object template,object page)
---------------------------------------------
The page method is used to do the basic page rendering from the template object
and the page object.


string static public template(object template[,object content])
---------------------------------------------------------------
The template render method starts the rendering of a template xml and a content
xml object and returns the html code string. It is the container call for the
recursive private _template method. It can render only a template, or the
combination of template and content.


string static private _template(object template,object content)
---------------------------------------------------------------
The central rendering method loops recursive over the cascaded template xml
definition. The template consists of format tag definitions, like div,etc. (see
template definition documentation). For each template entry the corresponding
content part is loaded and combined with the tag (see content definition
documentation). The rendered html code is returned by the method.

The renderer has some special features during this combination
process:

multiple content
----------------
	If there is more than one entry in the content for a certain tag, the tag
	is automatically repeated with the different content entries. This action
	can also be cascaded in the content definition.

plugins
-------
	With the integrated plugin system, the functionality of the rendering
	engine can be extended very simple (see plugin documentation).

	The plugin class is started with the current tag, the plugin type "render"
	and an options array with additional parameters, which are:

		template							the currently rendered template part, which is the
													subpart of the hyrarchy in the recursive process
													currently rendered
		content								the content definition
		value									the value parameter of the template definition

	

module call
-----------
	For each template tag a module can be defined. The assignment of the modules
	to the content is done inside the content definition, the linking of the
	modules in performed by the OLIVProcessor class before the rendering is
	started.

	Each module is capable of starting an own rendering process with a template
	and a content xml inside the currently rendered tag.

link definition
---------------
	With a url/title definition in either the template, or the content xml, each
	tag can be concluded in a <a> hyperlink tag. It automatically generates an
	intern page link with the router class (see router documentation).


object static private callScript(object module)
-----------------------------------------------
The script takes the information from the module object and creates a
new instance of the module. The constructor of the module must contain the
module main script. The return value has to be stored in the
public module->$o attribute, which can be read by the renderer.

